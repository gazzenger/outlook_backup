ThisOutlookSession

Private WithEvents Items As Outlook.Items
  
Private Sub Application_Startup()
    Set Items = Session.GetDefaultFolder(olFolderSentMail).Items
    ExpandAllFolders
End Sub



Private Sub Items_ItemAdd(ByVal Item As Object)
 
If Item.Class = olMail Then
    'repeat for each account
    If (Item.SendUsingAccount = "2H Exchange 2010") Or (Item.SendUsingAccount = "Gary.Namestnik@2hoffshore.com") Then
     
    ' Get the GetFolderPath function from http://slipstick.me/getfolderpath
    ' Set MovePst = GetFolderPath("Public Folders - Gary.Namestnik@2hoffshore.com\Favorites\301 Buoyancy Tank")
     
        If MsgBox("Would you like to shift this message to a public folder?", vbYesNo, "Confirm") = vbYes Then
            Set MovePst = FolderPick
            If Not (MovePst Is Nothing) Then
                Item.UnRead = False
                Item.Move MovePst
            End If
        End If
    End If
End If
End Sub

Function GetFolderPath(ByVal FolderPath As String) As Outlook.Folder
    Dim oFolder As Outlook.Folder
    Dim FoldersArray As Variant
    Dim i As Integer

    On Error GoTo GetFolderPath_Error
    If Left(FolderPath, 2) = "\\" Then
        FolderPath = Right(FolderPath, Len(FolderPath) - 2)
    End If
    'Convert folderpath to array
    FoldersArray = Split(FolderPath, "\")
    Set oFolder = Application.Session.Folders.Item(FoldersArray(0))
    If Not oFolder Is Nothing Then
        For i = 1 To UBound(FoldersArray, 1)
            Dim SubFolders As Outlook.Folders
            Set SubFolders = oFolder.Folders
            Set oFolder = SubFolders.Item(FoldersArray(i))
            If oFolder Is Nothing Then
                Set GetFolderPath = Nothing
            End If
        Next
    End If
    'Return the oFolder
    Set GetFolderPath = oFolder
    Exit Function

GetFolderPath_Error:
    Set GetFolderPath = Nothing
    Exit Function
End Function

    Function FolderPick() As Outlook.Folder
    Dim objNS As NameSpace
    Dim objFolder As Folder

    Set objNS = Application.GetNamespace("MAPI")
    Set objFolder = objNS.PickFolder



    If TypeName(objFolder) <> "Nothing" Then

        Debug.Print vbCr & " objFolder: " & objFolder

    Else

        Debug.Print vbCr & "Cancel"

    End If



Set FolderPick = objFolder
'    Set objFolder = Nothing
'    Set objNS = Nothing
    End Function

Private Sub ExpandAllFolders()
  On Error Resume Next
  Dim Ns As Outlook.NameSpace
  Dim Folders As Outlook.Folders
  Dim CurrF As Outlook.MAPIFolder
  Dim F As Outlook.MAPIFolder
  Dim ExpandDefaultStoreOnly As Boolean

  ExpandDefaultStoreOnly = False

  Set Ns = Application.GetNamespace("Mapi")
  Set CurrF = Application.ActiveExplorer.CurrentFolder

  If ExpandDefaultStoreOnly = True Then
    Set F = Ns.GetDefaultFolder(olFolderInbox)
    Set F = F.Parent
    Set Folders = F.Folders
    LoopFolders Folders, False

  Else
    LoopFolders Ns.Folders, True
  End If

  DoEvents
  Set Application.ActiveExplorer.CurrentFolder = CurrF
End Sub

Private Sub LoopFolders(Folders As Outlook.Folders, _
  ByVal bRecursive As Boolean _
)
  Dim F As Outlook.MAPIFolder

  For Each F In Folders
    Set Application.ActiveExplorer.CurrentFolder = F
    DoEvents

    If bRecursive Then
      If F.Name = "Public Folders - Gary.Namestnik@2hoffshore.com" Then
        LoopFolders F.Folders, True
      ElseIf F.Folders.Count Then
        LoopFolders F.Folders, False
      End If
    End If
  Next
End Sub






Module 1
Public SelectedDate As Date

Function OpenCalendar() As Date

frmCalendar.Show
OpenCalendar = SelectedDate

End Function



Public Sub SetExpiryTime()
  Dim Sel As Outlook.Selection
  Dim obj As Object
  Dim Interval As Long
  Dim ExpiryTime As Date
  Dim Text$

  If TypeOf Application.ActiveWindow Is Outlook.Inspector Then
    Set obj = Application.ActiveInspector.CurrentItem

  Else
    Set Sel = Application.ActiveExplorer.Selection
    If Sel.Count = 0 Then
      Exit Sub
    Else
      Set obj = Sel(1)
    End If
  End If

  Select Case True
  Case (TypeOf obj Is Outlook.MailItem), _
    (TypeOf obj Is Outlook.MeetingItem), _
    (TypeOf obj Is Outlook.PostItem)

    ExpiryTime = obj.ExpiryTime
  End Select

'  If ExpiryTime = #1/1/4501# Then
'    Text = "-"
'  Else
'    Text = ExpiryTime
'  End If
'
'  If Application.LanguageSettings.LanguageID(2) = 1031 Then
'    Text = "Aktuelles Ablaufdatum: " & Text & vbCrLf & vbCrLf
'    Text = Text & "In wieviel Wochen soll die Auswahl ablaufen?"
'    Text = InputBox(Text, , "8")
'  Else
'    Text = "Current expiry time: " & Text & vbCrLf & vbCrLf
'    Text = Text & "In how many weeks should the selection expire?"
'    Text = InputBox(Text, , "8")
'  End If

   If Not (obj.ExpiryTime = #1/1/4501#) Then
    frmCalendar.MonthView1.Year = Year(obj.ExpiryTime)
    frmCalendar.MonthView1.Month = Month(obj.ExpiryTime)
    frmCalendar.MonthView1.Day = Day(obj.ExpiryTime)
   End If
   
  SelDate = OpenCalendar


  If Not (SelDate = 1) Then


    If Not Sel Is Nothing Then
      For Each obj In Sel

        Select Case True
        Case (TypeOf obj Is Outlook.MailItem), _
          (TypeOf obj Is Outlook.MeetingItem), _
          (TypeOf obj Is Outlook.PostItem)

          obj.ExpiryTime = DateAdd("m", 1, SelDate)
          obj.Save
        End Select
      Next

    Else
      Select Case True
      Case (TypeOf obj Is Outlook.MailItem), _
        (TypeOf obj Is Outlook.MeetingItem), _
        (TypeOf obj Is Outlook.PostItem)

        obj.ExpiryTime = DateAdd("m", 1, SelDate)
        obj.Save
      End Select
    End If
  End If
End Sub

